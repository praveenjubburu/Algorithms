class Solution {
public:
    void solveSudoku(vector<vector<char>>& A) {
        const int n=A.size();
        const int m=A[0].size();
        function<bool(int,int,char)>ok=[&](int i,int j,char c){
            for(int row=0;row<n;row++){
                for(int col=0;col<m;col++){
                    if(A[row][j]==c)return false;
                    if(A[i][col]==c)return false;
                    if(A[3*(i/3)+row/3][3*(j/3)+row%3]==c)return false;
                }
            }
            return true;
        };
        function<bool()>dfs=[&](){
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(A[i][j]=='.'){
                        for(int k='1';k<='9';k++){
                            if(ok(i,j,k)){
                                A[i][j]=k;
                                if(dfs()){
                                    return true;
                                }else{
                                    A[i][j]='.';
                                }
                            }
                        }
                        return false;
                    }
                }
            }
            return true;
        };
        dfs();
    }
};
